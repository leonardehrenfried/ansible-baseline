---
- name: Only run "apt update" if the last one is more than a week ago
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  ansible.builtin.apt:
    update_cache: True
    cache_valid_time: 604800

- name: Install Centos-specific packages
  when: ansible_distribution == 'CentOS'
  package:
    name:
      - epel-release
    state: present

- name: Install Debian/Ubuntu-specific packages
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  package:
    name:
      - cron-apt
    state: present

- name: Install base packages
  package:
    name:
      - htop
      - tree
      - neovim
      - autojump
      - ripgrep
      - jq
      - unzip
      - tar
      - sudo
      - bash-completion
    state: present

- name: Install global shell config
  template:
    src: "{{ item }}"
    dest: /etc/profile.d/
  with_items:
    - alias.sh
    - prompt.sh

- name: Remove custom colorls
  ansible.builtin.file:
    path: /etc/profile.d/colorls.sh
    state: absent

- name: Set a hostname
  ansible.builtin.hostname:
    name: "{{ server_name }}"

- name: Set timezone
  timezone:
    name: '{{ timezone }}'

- name: Configure passwordless sudo
  ansible.builtin.copy:
    content: '%{{ sudo_group }} ALL=(ALL) NOPASSWD: ALL'
    dest: /etc/sudoers.d/passwordless

- name: Create user without password and add to groups
  when: item.password is not defined
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups:
      - "{{ sudo_group }}"
      - systemd-journal
    append: true
    state: present
    createhome: true
    shell: /bin/bash
  with_items: "{{ users }}"

- name: Create user with password and add to groups
  when: item.password is defined
  ansible.builtin.user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    groups:
      - "{{ sudo_group }}"
      - systemd-journal
    append: true
    state: present
    createhome: true
    shell: /bin/bash
  with_items: "{{ users }}"

- name: Set authorized keys from url
  when: item.keys_url is defined
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.keys_url }}"
  with_items: "{{ users }}"

- name: Set authorized keys from local file
  when: item.keys_file is defined
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ lookup('file', item.keys_file) }}"
  with_items: "{{ users }}"

- name: Delete .bashrc file for users
  ansible.builtin.file:
    path: "/home/{{ item.name }}/.bashrc"
    state: absent
  with_items: "{{ users }}"

- name: Remove users
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: yes
  with_items: "{{ removed_users }}"
